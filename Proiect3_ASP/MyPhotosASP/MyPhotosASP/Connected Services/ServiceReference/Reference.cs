//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyPhotoTable", Namespace="http://schemas.datacontract.org/2004/07/PhotosAPI", IsReference=true)]
    public partial class MyPhotoTable : object
    {
        
        private string CategoryField;
        
        private System.DateTime Create_DateField;
        
        private string DescriptionField;
        
        private string EventField;
        
        private int IdField;
        
        private string NameField;
        
        private string PathField;
        
        private string PersonField;
        
        private string PlaceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category
        {
            get
            {
                return this.CategoryField;
            }
            set
            {
                this.CategoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Create_Date
        {
            get
            {
                return this.Create_DateField;
            }
            set
            {
                this.Create_DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Event
        {
            get
            {
                return this.EventField;
            }
            set
            {
                this.EventField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Person
        {
            get
            {
                return this.PersonField;
            }
            set
            {
                this.PersonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Place
        {
            get
            {
                return this.PlaceField;
            }
            set
            {
                this.PlaceField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyPhoto/GetAllInfo", ReplyAction="http://tempuri.org/IMyPhoto/GetAllInfoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.MyPhotoTable>> GetAllInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyPhoto/submitPhoto", ReplyAction="http://tempuri.org/IMyPhoto/submitPhotoResponse")]
        System.Threading.Tasks.Task submitPhotoAsync(string name, string place, string people, string description, string picEvent, string category, System.DateTime createTime, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyPhoto/modifyPhoto", ReplyAction="http://tempuri.org/IMyPhoto/modifyPhotoResponse")]
        System.Threading.Tasks.Task modifyPhotoAsync(int id, string name, string place, string people, string description, string picEvent, string category, System.DateTime createTime, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyPhoto/getInfoById", ReplyAction="http://tempuri.org/IMyPhoto/getInfoByIdResponse")]
        System.Threading.Tasks.Task<ServiceReference.MyPhotoTable> getInfoByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyPhoto/GetInfoBySomething", ReplyAction="http://tempuri.org/IMyPhoto/GetInfoBySomethingResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.MyPhotoTable>> GetInfoBySomethingAsync(string searchBy, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyPhoto/deletePhoto", ReplyAction="http://tempuri.org/IMyPhoto/deletePhotoResponse")]
        System.Threading.Tasks.Task deletePhotoAsync(ServiceReference.MyPhotoTable myPhotoTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyPhoto/modifyPath", ReplyAction="http://tempuri.org/IMyPhoto/modifyPathResponse")]
        System.Threading.Tasks.Task modifyPathAsync(int id, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyPhoto/deletePhotoById", ReplyAction="http://tempuri.org/IMyPhoto/deletePhotoByIdResponse")]
        System.Threading.Tasks.Task deletePhotoByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IServiceChannel : ServiceReference.IService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class Service : System.ServiceModel.ClientBase<ServiceReference.IService>, ServiceReference.IService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service() : 
                base(Service.GetDefaultBinding(), Service.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service(EndpointConfiguration endpointConfiguration) : 
                base(Service.GetBindingForEndpoint(endpointConfiguration), Service.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.MyPhotoTable>> GetAllInfoAsync()
        {
            return base.Channel.GetAllInfoAsync();
        }
        
        public System.Threading.Tasks.Task submitPhotoAsync(string name, string place, string people, string description, string picEvent, string category, System.DateTime createTime, string path)
        {
            return base.Channel.submitPhotoAsync(name, place, people, description, picEvent, category, createTime, path);
        }
        
        public System.Threading.Tasks.Task modifyPhotoAsync(int id, string name, string place, string people, string description, string picEvent, string category, System.DateTime createTime, string path)
        {
            return base.Channel.modifyPhotoAsync(id, name, place, people, description, picEvent, category, createTime, path);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.MyPhotoTable> getInfoByIdAsync(int id)
        {
            return base.Channel.getInfoByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.MyPhotoTable>> GetInfoBySomethingAsync(string searchBy, string text)
        {
            return base.Channel.GetInfoBySomethingAsync(searchBy, text);
        }
        
        public System.Threading.Tasks.Task deletePhotoAsync(ServiceReference.MyPhotoTable myPhotoTable)
        {
            return base.Channel.deletePhotoAsync(myPhotoTable);
        }
        
        public System.Threading.Tasks.Task modifyPathAsync(int id, string fileName)
        {
            return base.Channel.modifyPathAsync(id, fileName);
        }
        
        public System.Threading.Tasks.Task deletePhotoByIdAsync(int id)
        {
            return base.Channel.deletePhotoByIdAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return Service.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return Service.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService,
        }
    }
}
